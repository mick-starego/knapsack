/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("{let itemList = [];\nlet target = 50;\nlet tax = 2.5;\nlet result = {};\nlet solutionPointer = 0;\nlet worker;\n\n// EVENT HANDLERS AND HELPERS\n\nfunction onStep1Input() {\n    const configForm = document.getElementById('config-form');\n    const formData = new FormData(configForm);\n\n    target = parseNumber(formData.get('target'));\n    tax = parseNumber(formData.get('tax'));\n    runStep3();\n}\n\nfunction onStep2Submit(event) {\n    // Prevent page reload\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n    event.target.reset();\n    event.target.querySelector('button').disabled = true;\n\n    itemList = [\n        {\n            name: formData.get('name'),\n            unitPrice: parseNumber(formData.get('price')),\n            category: formData.get('category')\n        },\n        ...itemList\n    ];\n    drawItemList();\n    runStep3();\n}\n\nfunction onRemoveItemClicked(itemName) {\n    itemList = itemList.filter((item) => item.name !== itemName);\n    drawItemList();\n    updateSubmitButtonState();\n    runStep3();\n}\n\nfunction onShuffleClicked() {\n    solutionPointer++;\n    if (solutionPointer >= result.data?.length) {\n        solutionPointer = 0;\n    }\n    drawReciept();\n}\n\nfunction updateSubmitButtonState() {\n    const itemForm = document.getElementById('item-form');\n    const formData = new FormData(itemForm);\n    const submitButton = itemForm.querySelector('button');\n\n    let name = formData.get('name');\n    const itemNames = itemList.map((item) => item.name);\n    if (itemNames.includes(name)) {\n        // Don't allow names that have already been used\n        name = null;\n    }\n\n    const price = parseNumber(formData.get('price'));\n    const category = formData.get('category');\n\n    submitButton.disabled = !name || !price || !category;\n}\n\nfunction runStep3() {\n    if (target && tax != null && itemList.length) {\n        drawSpinner();\n\n        // Cancel the currently running worker, if one exists\n        if (worker) {\n            worker.terminate();\n        }\n\n        worker = new Worker('knapsack.bundle.js');\n        worker.postMessage({\n            target,\n            tax,\n            itemList\n        });\n\n        worker.onmessage = function (event) {\n            result = event.data;\n            solutionPointer = 0;\n            drawReciept();\n        };\n    } else {\n        // If params are invalid, clear results\n        result = {};\n        solutionPointer = 0;\n        drawReciept();\n    }\n}\n\n// UPDATE VIEW\n\nfunction drawItemList() {\n    // Clear existing list elements\n    const itemListEl = document.getElementById('item-list');\n    itemListEl.innerHTML = '';\n\n    itemList.forEach(addItem);\n}\n\nfunction drawSpinner() {\n    // Clear existing list elements and help text\n    const receiptEl = document.getElementById('receipt');\n    receiptEl.innerHTML = '';\n    const helpEl = document.getElementById('step-3-help');\n    helpEl.innerText = '';\n    helpEl.classList.add('visually-hidden');\n\n    const spinnerEl = document.getElementById('spinner');\n    spinnerEl.classList.remove('visually-hidden');\n}\n\nfunction drawReciept() {\n    // Clear existing list elements\n    const receiptEl = document.getElementById('receipt');\n    receiptEl.innerHTML = '';\n    const spinnerEl = document.getElementById('spinner');\n    spinnerEl.classList.add('visually-hidden');\n\n    // Show help text\n    const helpEl = document.getElementById('step-3-help');\n    helpEl.classList.remove('visually-hidden');\n\n    // Show shuffle button if necessary\n    const shuffleButtonEl = document.getElementById('shuffle-button');\n    if (result.data?.length > 1) {\n        shuffleButtonEl.classList.remove('visually-hidden');\n    } else {\n        shuffleButtonEl.classList.add('visually-hidden');\n    }\n\n    // Update help text and data\n    if (result.error) {\n        helpEl.innerText = `Error: ${result.error}`;\n    } else if (!result.data?.length) {\n        helpEl.innerText = 'No solutions found. Try adding more items!';\n    } else {\n        helpEl.innerText = `Found ${result.numSolutions.toLocaleString()} Solutions`;\n        result.data[solutionPointer].solution.forEach(addReceiptItem);\n    }\n}\n\nfunction addItem(item) {\n    const template = document.getElementById('item-template');\n    const clone = template.content.cloneNode(true);\n    const itemName = clone.querySelector('.item-name');\n    itemName.textContent = item.name;\n\n    const itemPrice = clone.querySelector('.item-price');\n    itemPrice.textContent = '$' + item.unitPrice.toFixed(2);\n\n    const itemCategory = clone.querySelector('.category');\n    itemCategory.classList.add('category--' + item.category);\n\n    const buttonEl = clone.querySelector('.clear');\n    buttonEl.onclick = () => onRemoveItemClicked(item.name);\n\n    const itemListEl = document.getElementById('item-list');\n    itemListEl.prepend(clone);\n}\n\nfunction addReceiptItem(receiptItem) {\n    const template = document.getElementById('receipt-item-template');\n    const clone = template.content.cloneNode(true);\n    const itemName = clone.querySelector('.item-name');\n    itemName.textContent = receiptItem.name;\n\n    const itemQuantity = clone.querySelector('.item-quantity');\n    itemQuantity.textContent = receiptItem.quantity;\n    if (!receiptItem.quantity) {\n        itemQuantity.style.display = 'none';\n    }\n\n    const itemTotal = clone.querySelector('.item-total');\n    itemTotal.textContent = '$' + receiptItem.totalPrice.toFixed(2);\n\n    const itemCategory = clone.querySelector('.list-group-item');\n    itemCategory.classList.add('category--' + receiptItem.category);\n\n    const receipt = document.getElementById('receipt');\n    receipt.appendChild(clone);\n}\n\n// UTILS\n\nfunction parseNumber(s) {\n    const n = parseFloat(s);\n    return isNaN(n) ? null : Number(n.toFixed(2));\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    const configForm = document.getElementById('config-form');\n    configForm.addEventListener('change', onStep1Input);\n\n    const itemForm = document.getElementById('item-form');\n    itemForm.addEventListener('input', updateSubmitButtonState);\n    itemForm.addEventListener('submit', onStep2Submit);\n\n    const shuffleButton = document.getElementById('shuffle-button');\n    shuffleButton.addEventListener('click', onShuffleClicked);\n});\n\n//# sourceURL=webpack://knapsack/./src/index.js?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;